// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iUsP5zCETeSVKsK2jZHQGG
// Component: IIErH2i67RBr
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: tUnhHDXVjmN/component
import Button from "../../Button"; // plasmic-import: JSW09KUny-Q/component
import { useScreenVariants as useScreenVariantsff4A5ECsPFodX } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ff4A5eCsPFodX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_shieldify_coming_soon.module.css"; // plasmic-import: iUsP5zCETeSVKsK2jZHQGG/projectcss
import sty from "./PlasmicComingSoon.module.css"; // plasmic-import: IIErH2i67RBr/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: gKo77wNYF/icon
import FrameIcon from "./icons/PlasmicIcon__Frame"; // plasmic-import: bbuKt-tv16/icon
import Frame2Icon from "./icons/PlasmicIcon__Frame2"; // plasmic-import: I-5U6NPstU/icon
import Frame3Icon from "./icons/PlasmicIcon__Frame3"; // plasmic-import: -bG5JT9G86/icon
import imageHp9Pwrhgf from "./images/image.svg"; // plasmic-import: hp9PWRHGF/picture

export const PlasmicComingSoon__VariantProps = new Array();

export const PlasmicComingSoon__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicComingSoon__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsff4A5ECsPFodX()
  });
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <IconIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__meGZx)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oLx2B,
              ``
            )}
          >
            {"Coming Soon"}
          </div>
          {true ? (
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "80.38px"
                  : "152.38px"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: imageHp9Pwrhgf,
                fullWidth: 118,
                fullHeight: 150,
                aspectRatio: 0.784314
              }}
            />
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fj3Eo)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qqbGx)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yyEh3
                      )}
                    >
                      {"Stay one step ahead of chargebacks!"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__moIVh,
                      ``
                    )}
                  >
                    {
                      "Shield your business with lightning-fast chargeback alerts, enabling you to react decisively and stay in control. Real-time notifications for chargeback requests to protect your business."
                    }
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xggQc)}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    value={p.generateStateValueProp($state, [
                      "textInput",
                      "value"
                    ])}
                  />

                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {};
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "b4btuGw9Y",
                                componentUuid: "IIErH2i67RBr"
                              },
                              () =>
                                (({ destination }) => {
                                  location.assign(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "b4btuGw9Y",
                            componentUuid: "IIErH2i67RBr"
                          },
                          $steps["goToPage"]
                        );
                      }
                    }}
                    shape={"rounded"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iIodG
                      )}
                    >
                      {"Notify Me"}
                    </div>
                  </Button>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__owshx)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lBuq
            )}
          >
            {"â“’ Shieldify Inc."}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xQzjb
            )}
          >
            {"support@shieldify.com"}
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fe4Km)}
          >
            <FrameIcon
              data-plasmic-name={"facebook"}
              data-plasmic-override={overrides.facebook}
              className={classNames(projectcss.all, sty.facebook)}
              role={"img"}
            />

            <Frame2Icon
              data-plasmic-name={"linkedin"}
              data-plasmic-override={overrides.linkedin}
              className={classNames(projectcss.all, sty.linkedin)}
              role={"img"}
            />

            <Frame3Icon
              data-plasmic-name={"twitter"}
              data-plasmic-override={overrides.twitter}
              className={classNames(projectcss.all, sty.twitter)}
              role={"img"}
            />
          </p.Stack>
        </p.Stack>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div className={classNames(projectcss.all, sty.freeBox__kgsid)} />
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div className={classNames(projectcss.all, sty.freeBox__j2Ehr)} />
        ) : null}
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "svg",
    "img",
    "textInput",
    "button",
    "facebook",
    "linkedin",
    "twitter"
  ],

  svg: ["svg"],
  img: ["img"],
  textInput: ["textInput"],
  button: ["button"],
  facebook: ["facebook"],
  linkedin: ["linkedin"],
  twitter: ["twitter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicComingSoon__ArgProps,
          internalVariantPropNames: PlasmicComingSoon__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicComingSoon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComingSoon";
  } else {
    func.displayName = `PlasmicComingSoon.${nodeName}`;
  }
  return func;
}

export const PlasmicComingSoon = Object.assign(
  // Top-level PlasmicComingSoon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    facebook: makeNodeComponent("facebook"),
    linkedin: makeNodeComponent("linkedin"),
    twitter: makeNodeComponent("twitter"),
    // Metadata about props expected for PlasmicComingSoon
    internalVariantProps: PlasmicComingSoon__VariantProps,
    internalArgProps: PlasmicComingSoon__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Coming Soon",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicComingSoon;
/* prettier-ignore-end */
